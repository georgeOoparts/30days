background-imageで指定された背景画像は
図のように表示範囲を埋め尽くすまで、
繰り返し表示される性質があります。
------------------------------------------
1枚の画像で表示範囲を埋め尽くすように画像の大きさが拡大縮小
background-size: cover;
------------------------------------------

------------------------------------------

opacity:0.7;
------------------------------------------
letter-spacing:5px;
------------------------------------------
インライン要素　a　
width height 上下margin　指定できない
------------------------------------------

ブロック要素　ブロックである
<a>タグをブロック要素にすると、大きさが親要素いっぱいに広がるので、
全体をクリックできるようになります。
display:block;
------------------------------------------
横並びブロック  要素
display:inline-block;
  opacity:0.8;
------------------------------------------

角を丸めるにはborder-radiusプロパティを用います。
/* border-radiusを4pxに指定してください */
  border-radius:4px;
------------------------------------------

.containerクラスを中央寄せにしましょう。
marginにautoを指定するときは、必ずwidthを併せて指定します。
なお、上下のmarginにautoを指定することはできません。
margin:0 auto;
containerクラスのように、
広い範囲を囲うようなブロック要素の中央ぞろえはmarginを、
margin:0 auto;
------------------------------------------
テキストやボタンのようなインライン要素・インラインブロック要素
の場合はtext-alignを使うようにしましょう。
text-align:center;
----------------------------------------------------------
ファビコンを使う
アイコンを表示するにはFont Awesomeというものを使うと便利です。
たくさんのアイコンが用意されており、自分の気に入ったアイコンを簡単に使うことが出来ます。
https://fontawesome.com に詳しい使い方やアイコンの一覧が載っています。

Font Awesomeは、以下の手順で使用することができます。
①Font AwesomeのCSSファイルを読み込む
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
②<span>タグにfaクラスとfa-アイコン名クラスを指定する
<!-- ここに<span>タグを追加しましょう -->
<span class="fa fa-twitter"></span>
            Twitterで登録

/* faクラスのmargin-rightを5pxに指定してください */
.fa{
  margin-right:5px;
}
----------------------------------------------------------
これまで要素を透明にするにはopacityを用いてきました。
しかし、opacityには要素の中身全てを透明にするという性質があります。
opacity: 0.9;
背景色のみを透明にするには、rgbaというものを使う必要があります。
background-color:rgba(34, 49, 52, 0.9);
----------------------------------------------------------

transitionを使うとアニメーションをつけることができます。
「変化の対象」や、「変化にかかる時間」などを指定できます。
「変化の対象」にはcolorなどのプロパティを指定しますが、
allを指定すると全てのプロパティに適用出来ます。
transitionは多くの場合hoverと組み合わせて使います。
/* transitionを指定してください */
.class{
  transition:all 0.5s;
  この後　、変化後のcss
}
----------------------------------------------------------
座標
line-heightプロパティを使うと、行の高さを指定することができます。
要素の縦方向の中央に文字を配置するのにも使えます。
要素の高さとline-heightプロパティを同じ値にすると、
文字がちょうど中央に配置されるようになります。
line-height:65px;


--------------------

HTMLの要素同士は通常重なって表示されることはありませんが、
position: absolute;を使うと、
要素同士を重ねて表示することが出来ます。
サイト全体の左上部分を基準とし、
そこからの位置をtopとleftを用いて指定します。
また、rightやbottomを併用することも可能です。

position: absolute;の基準位置はサイト全体の左上部分です

相対座標指定
親要素であるlesson-iconにposition: relative;
その子要素にposition: absolute;を指定すると、
親座標を基準とした位置を指定する
---------------
立体的なボタンを作る
ボックスに影を付けるためにはbox-shadowプロパティを用います。
 横4px　縦7px
 box-shadow:4px 7px #1a7940;
-------------------
cursorプロパティを用いることでマウスのカーソルが
要素に乗ったときのカーソルの形を変えることができます。
タグによってcursorが初期状態で設定されているものもあり、
例えば<a>タグは初期状態でpointerが設定されています。
/* カーソルの形をpointerにしてください */
  cursor:pointer;
-------------------
ボタンを押したような処理
セレクタにactiveを用いることで、
要素がクリックされている間だけCSSを適用することができます。
セレクタ:activeというように指定します。
-----------------------------------------

ボタンを押したような見た目処理
前回position: relative;はposition: absolute;
の基準位置を決めるために使っていましたが、
要素の位置を変更するためにも使うことが出来ます。
position: relative;をtopやleftと併用すると、
その要素を本来の位置からずらせます。
.btn{
  box-shadow:none;
  position:relative;//
  top:7px;
}
-----------------------------------------

position: fixed;を使うと、
常に要素を画面上の指定した位置に固定させておくことができます。
位置は、top、left、right、bottomを使って指定します。

positionを使用すると要素の重なりが生じます。
その結果図のように、レッスン紹介部分とヘッダーが重なった時に、
ヘッダーが隠れてしまいます。
重なり順を指定して、ヘッダーが上に表示されるようにしましょう。
position:fixed;
  top:0;
z-indexプロパティは、要素の重なりの順序を指定する際に使用します。
z-indexは整数値で指定し、値が大きいほど上に表示されます。
z-indexプロパティは必ずpositionプロパティと併用する必要があるので、
注意しましょう。
 position:fixed;
/* z-indexを10に指定 数が大きいほど手前表示*/
  z-index:10;

  ーーーーーーーーーーーーーーーーーーーーーーーーーー
  画面サイズによって表示変える
  メディアクエリの書き方を見てみましょう。
メディアクエリは、@media (条件) { .... }という様に書きます。
指定された条件が当てはまるときにのみ{ }内のCSSが適用されます。
/* ブレイクポイントをmax-width: 1000pxに指定してください */
@media (max-width:1000px) {
  /* h1のcolorをblueに指定してください */
  h1{
    color:blue;
  }
  
}
------------------------------
左右のpaddingを追加すると要素の幅の合計が100%を超えてしまい、
レイアウトが崩れてしまっています。

box-sizingをborder-boxに指定すると、
要素の幅(width)の合計にpaddingとborderが含まれるようになります。
そのため、paddingやborderを追加した時に生じるレイアウト崩れ
を未然に防ぐことができます
（※ただし、marginはborder-boxでの合計値に含まれません）。
* {
  box-sizing: border-box;
}
-----------------
全ての要素にcssを当てはめる
* {
  box-sizing: border-box;
}
-----------------
レスポンシブデザインを適用する準備として、
<head>タグ内にviewportを設定しましょう。
viewportを設定しないと、スマートフォンやタブレット
での閲覧時にメディアクエリが正しく機能しません。
<meta name="viewport" content="width=device-width, initial-scale=1.0">
適用cssは必ずviewportよりも下の行に記述する
---------------------
通常、親要素の高さは子要素を包む高さとなります。
しかし、子要素が全てfloatの時、親要素の高さは0となってしまうという性質があります。
これは、floatは「浮いている」という意味で、
親要素から見るとfloatの子要素は存在しないように見えるからです。

子要素が全てfloatでも、親要素が高さを持つように設定してみましょう。
floatはclear: left;で「浮いている」状態を解除できます。
ここではclear: left;を適用するためだけの空のタグを用意しましょう。
空タグとclearでfloatを解除するのはよく使うテクニックなので、
覚えておくようにしましょう。
---------------------
要素を非表示にするにはdisplay: none;を用います。
---------------------
非表示にした要素を表示させる時は、display: block;を用いて表示します。
---------------------
縦並びのものを横並びにするlistなど
横並びにしたい要素の親要素にdisplay: flexを指定します。
---------------------
親要素の幅に合わせて伸ばしたい要素にflex: autoを指定します。
---------------------
4つの横並び用要素を２つずつ画面いっぱいに並べる
.oya{
  display:flex;
  flex-wrap:wrap;
}
.ko{
  flex:auto;
  width:50%;
}
---------------------
縦に並べたい要素の親要素にflex-direction: columnを指定します。
---------------------
---------------------
---------------------
---------------------
---------------------
---------------------
---------------------
---------------------
---------------------
---------------------
---------------------
---------------------
---------------------
---------------------
---------------------
---------------------
---------------------
---------------------
---------------------
---------------------
---------------------
---------------------
---------------------
---------------------
---------------------
---------------------
---------------------
---------------------
---------------------
---------------------







