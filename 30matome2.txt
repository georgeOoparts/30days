詰まっている箇所（〇〇編DAY〇〇）
聞きたいことの一行まとめ
起きている問題（起きている現象の詳細/エラーメッセージ/スクリーンショット）
ソースコード（関連するソースコード/全ソースコード）
問題解決するために試したこと（コードもあれば追記） 
問題について自分なりに考えたこと（デバッグ結果/検索結果/自分なりの原因予想）
----------------------
htmlファイルのデフォルトを表示(emet)
!+tab 
----------------------
<a href="https://www.daily-trial.com/">リンクするよ</a>
<img src="https://tokyofreelance.jp/web_first.png"alt="">

altの文字は画像が表示されないときに出る。画像の説明
またブラウザの読み上げ機能でも、altが読み上げられる。
----------------------
ブロック要素のタグは、閉じタグ</～>の時点で改行されます。
なので、ブロック要素同士を連続で書くと縦に並ぶことになります。
一方、インライン要素のタグを連続で書くと横に並びます。
段落ではなく文章として認識されているため、改行がされないんです。

また、「タグに横幅や高さの設定をしたのに、反映されない！」
というのは初心者の人が陥りがちな落とし穴ですが、それはインライン要素だからです。
------------------------------------------

ブロック要素　ブロックである
<a>タグをブロック要素にすると、大きさが親要素いっぱいに広がるので、
全体をクリックできるようになります。
display:block;
------------------------------------------
marginにautoを指定するときは、必ずwidthを併せて指定します。
なお、上下のmarginにautoを指定することはできません。
margin:0 auto;
containerクラスのように、
広い範囲を囲うようなブロック要素の中央ぞろえはmarginを、
margin:0 auto;
------------------------------------------
テキストやボタンのようなインライン要素・インラインブロック要素
の場合はtext-alignを使うようにしましょう。
text-align:center;
----------------------------------------------------------
横並びブロック  要素
display:inline-block;
------------------------------------------
インライン要素　a　
width height 上下margin　指定できない
------------------------------------------

透明度を上げる
  opacity:0.8;
------------------------------------------------
  opacityには要素の中身全てを透明にするという性質があります。
opacity: 0.9;
背景色のみを透明にするには、rgbaというものを使う必要があります。
background-color:rgba(34, 49, 52, 0.9);
----------------------------------------------------------
------------------------------------------
文字と文字のスペース
letter-spacing:5px;
----------------------
----------------------------------------------------------
ファビコンを使う
アイコンを表示するにはFont Awesomeというものを使うと便利です。
たくさんのアイコンが用意されており、自分の気に入ったアイコンを簡単に使うことが出来ます。
https://fontawesome.com に詳しい使い方やアイコンの一覧が載っています。

Font Awesomeは、以下の手順で使用することができます。
①Font AwesomeのCSSファイルを読み込む
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
②<span>タグにfaクラスとfa-アイコン名クラスを指定する
<!-- ここに<span>タグを追加しましょう -->
<span class="fa fa-twitter"></span>
            Twitterで登録

/* faクラスのmargin-rightを5pxに指定してください */
.fa{
  margin-right:5px;
}
transitionを使うとアニメーションをつけることができます。
「変化の対象」や、「変化にかかる時間」などを指定できます。
「変化の対象」にはcolorなどのプロパティを指定しますが、
allを指定すると全てのプロパティに適用出来ます。
transitionは多くの場合hoverと組み合わせて使います。
/* transitionを指定してください */
.class{
  transition:all 0.5s;
  この後　、変化後のcss
}
----------------------------------------------------------
座標
line-heightプロパティを使うと、行の高さを指定することができます。
要素の縦方向の中央に文字を配置するのにも使えます。
要素の高さとline-heightプロパティを同じ値にすると、
文字がちょうど中央に配置されるようになります。
line-height:65px;


--------------------
google検索したときの　サイトの説明文　検索に引っかかる時重要な要素
<meta name="description" content="デスクぷりくしょんです">
--------------------

HTMLの要素同士は通常重なって表示されることはありませんが、
position: absolute;を使うと、
要素同士を重ねて表示することが出来ます。
サイト全体の左上部分を基準とし、
そこからの位置をtopとleftを用いて指定します。
また、rightやbottomを併用することも可能です。

position: absolute;の基準位置はサイト全体の左上部分です

相対座標指定
親要素であるlesson-iconにposition: relative;
その子要素にposition: absolute;を指定すると、
親座標を基準とした位置を指定する
---------------
立体的なボタンを作る
ボックスに影を付けるためにはbox-shadowプロパティを用います。
 横4px　縦7px
 box-shadow:4px 7px #1a7940;
-------------------
cursorプロパティを用いることでマウスのカーソルが
要素に乗ったときのカーソルの形を変えることができます。
タグによってcursorが初期状態で設定されているものもあり、
例えば<a>タグは初期状態でpointerが設定されています。
/* カーソルの形をpointerにしてください */
  cursor:pointer;
-------------------
ボタンを押したような処理
セレクタにactiveを用いることで、
要素がクリックされている間だけCSSを適用することができます。
セレクタ:activeというように指定します。
-----------------------------------------

ボタンを押したような見た目処理
前回position: relative;はposition: absolute;
の基準位置を決めるために使っていましたが、
要素の位置を変更するためにも使うことが出来ます。
position: relative;をtopやleftと併用すると、
その要素を本来の位置からずらせます。
.btn{
  box-shadow:none;
  position:relative;//
  top:7px;
}
-----------------------------------------

position: fixed;を使うと、
常に要素を画面上の指定した位置に固定させておくことができます。
位置は、top、left、right、bottomを使って指定します。

positionを使用すると要素の重なりが生じます。
その結果図のように、レッスン紹介部分とヘッダーが重なった時に、
ヘッダーが隠れてしまいます。
重なり順を指定して、ヘッダーが上に表示されるようにしましょう。
position:fixed;
  top:0;
z-indexプロパティは、要素の重なりの順序を指定する際に使用します。
z-indexは整数値で指定し、値が大きいほど上に表示されます。
z-indexプロパティは必ずpositionプロパティと併用する必要があるので、
注意しましょう。
 position:fixed;
/* z-indexを10に指定 数が大きいほど手前表示*/
  z-index:10;

  ーーーーーーーーーーーーーーーーーーーーーーーーーー
  画面サイズによって表示変える
  メディアクエリの書き方を見てみましょう。
メディアクエリは、@media (条件) { .... }という様に書きます。
指定された条件が当てはまるときにのみ{ }内のCSSが適用されます。
/* ブレイクポイントをmax-width: 1000pxに指定してください */
@media (max-width:1000px) {
  /* h1のcolorをblueに指定してください */
  h1{
    color:blue;
  }
  
}
------------------------------
左右のpaddingを追加すると要素の幅の合計が100%を超えてしまい、
レイアウトが崩れてしまっています。

box-sizingをborder-boxに指定すると、
要素の幅(width)の合計にpaddingとborderが含まれるようになります。
そのため、paddingやborderを追加した時に生じるレイアウト崩れ
を未然に防ぐことができます
（※ただし、marginはborder-boxでの合計値に含まれません）。
* {
  box-sizing: border-box;
}
-----------------
全ての要素にcssを当てはめる
* {
  box-sizing: border-box;
}
-----------------
レスポンシブデザインを適用する準備として、
<head>タグ内にviewportを設定しましょう。
viewportを設定しないと、スマートフォンやタブレット
での閲覧時にメディアクエリが正しく機能しません。
<meta name="viewport" content="width=device-width, initial-scale=1.0">
適用cssは必ずviewportよりも下の行に記述する
---------------------
通常、親要素の高さは子要素を包む高さとなります。
しかし、子要素が全てfloatの時、親要素の高さは0となってしまうという性質があります。
これは、floatは「浮いている」という意味で、
親要素から見るとfloatの子要素は存在しないように見えるからです。

子要素が全てfloatでも、親要素が高さを持つように設定してみましょう。
floatはclear: left;で「浮いている」状態を解除できます。
ここではclear: left;を適用するためだけの空のタグを用意しましょう。
空タグとclearでfloatを解除するのはよく使うテクニックなので、
覚えておくようにしましょう。
---------------------
要素を非表示にするにはdisplay: none;を用います。
---------------------
非表示にした要素を表示させる時は、display: block;を用いて表示します。
---------------------
縦並びのものを横並びにするlistなど
横並びにしたい要素の親要素にdisplay: flexを指定します。
---------------------
親要素の幅に合わせて伸ばしたい要素にflex: autoを指定します。
---------------------
4つの横並び用要素を２つずつ画面いっぱいに並べる
.oya{
  display:flex;
  flex-wrap:wrap;
}
.ko{
  flex:auto;
  width:50%;
}
---------------------
縦に並べたい要素の親要素にflex-direction: columnを指定します。
---------------------

----------------------------------------------------------
<head>

<!-- ここでstyle.cssを読み込みます -->
<link rel="stylesheet" href="./css/style.css">
</head>
----------------------
絶対パス…ファイルのある場所を完全に指定する
相対パス…編集しているファイルから見たファイルの場所を指定する
----------------------
h2 { color: red; }
、「<h2></h2>で囲まれた範囲の（セレクタ）、
colorを（プロパティ）、redにする！（バリュー）」
----------------------

指定したクラスだけをcssで見た目変更
<h2 class="yellow-font">黄色のH2</h2>

/* .yellow-fontがついた要素の文字色を黄色に指定。こちらの方が優先されます */
  .yellow-font {
    color: yellow; 
    font-size: 20px;
  }
----------------------
太字にする
font-weight: bold;
----------------------
子要素を指定
<article class="contents">
<p>子孫となるpです。</p>
<p>子孫となるpです。</p>
</article>

.contents p {
font-size: 18px;
}
----------------------
直属の子要素のみ指定
<div class="contents">
<p>このpの色だけ変えたい</p>
<div>
<p>ここは変えない</p>
<p>ここも変えない</p>
</div>
</div>

/* 誤：「.contents p」指定では全てのpタグの色が変わってしまう */
.contents p {
color: red;
}

/* 正：「>」で繋げることで直属の子孫要素のみを指定できます */
.contents > p {
color: red;
}
----------------------
コンテンツエリア…内容が表示される部分
padding…要素の中に割り当てられている余白
border…要素の境界
margin…隣接する要素との余白
<div>～</div>という一つの要素は、実はこの四つの要素を含んだボックスになっているんです。
----------------------
クロームの検証機能でcssを変更する。

画面文字　文字クリック　＞右クリック検証＞右側に検証画面が出る

elements.styleにcss入力


----------------------
font-size: 18px;
font-size: 2em;2倍
font-size: 200%;2倍

----------------------
font-family:serif;//ちょっとシュッとなる

font-family:serif,sans-serif;
serifが環境的になかったら、sans-serifになる
----------------------
width: 250px;幅
height: 80px;高さ
padding: 20px; 内側全部20pxスペースあける

padding: 20px,10px,5px,3px;内側　上　→　↓　←　ピクセルをあける

border:10px solid black　黒の　枠で囲む
border:10px doted 点線で囲む

margin:10px　外側余白10px

box-sizing:border-box;  border以下をすべて合わせて　height　widthにする。
----------------------
inline要素
line-height: 40px;行間を指定

text-align: center;センターに文字を持ってくる
vertical-align: top; 垂直方向　上に合わせる
text-decoration: underline;　アンダーラインを引く
text-decoration: line-through;　アンダーラインを引く
later-spacing:10px

----------------------
background-color: red; 後ろの色指定
//注意　後ろ画像指定 入れるdivをdisplay:block;にしておく
//幅　高さ　指定する
background-image: url(./img/test.png);
    width: 600px;
    height: 600px;
background-size: contain;画像をサイズに収める　縦横比率そのまま
----------------------
background-repeat: no-repeat;画像をリピートしない
background-repeat: repeat-y;画像をｙ方向にリピートする
background-attachment: fixed;　背景画像スクロールさせても動かない
background-attachment: scroll;　背景画像スクロールさせる
----------------------
float: left;横並び


clear: both;横並び解除
----------------------
縦横を自由に指定し並べる（現在floatはあまりつかわれていない）
display: flex;柔軟に横に並べる
flex-wrap:wrap;　はみ出したら次の行に改行

justify-content: center;横方向　これは中央並べ
align-items: flex-end;　縦方向　これは↓に合わせる

flex-direction: column;　縦に並べる
flex-direction: row;　横に並べる（通常のdisplay: flex;）

コンテンツを等間隔に並べる
justify-content: space-between;コンテンツの間だけ
justify-content: space-arround;コンテンツの両端も含めて

flexboxを使うと、

要素の横並び「diplay:inline-block」
高さの中央揃え「vertical-align:middle」
右揃え・左揃え「float」をいっぺんにやってくれる
----------------------
常に表示させておきたいもの
position: fixed;
左から10px開けて表示
left:10px;
------------
---------------------
縦並びのものを横並びにするlistなど
横並びにしたい要素の親要素にdisplay: flexを指定します。
---------------------
親要素の幅に合わせて伸ばしたい要素にflex: autoを指定します。
---------------------
4つの横並び用要素を２つずつ画面いっぱいに並べる
.oya{
  display:flex;
  flex-wrap:wrap;
}
.ko{
  flex:auto;
  width:50%;
}
---------------------
縦に並べたい要素の親要素にflex-direction: columnを指定します。
---------------------
重なったオブジェクトの前に出す方を決める
z-index;100; 数字が大きいほど前に表示される
--------------
本来表示されるべき所からずらす
position:relative;
left:10px;

-------
親要素を基準として相対的にずらす
親要素に
position:relative;
子要素に
position:absolute;
left:10px;


----------------------
vscode autosave
上部メニューから「設定」を選ぶ\
（Macの場合は【Command 】+【,】のショートカットでも開きます！）
ファイル＞ユーザー設定＞設定＞autosave＞after　delay
検索窓に「autosave」を入力
セレクトボックスから「afterDelay」を選ぶ

off：自動保存されません
afterDelay：一定時間操作がなかったら保存します
onFocusChange：タブからカーソルが消えた時点で保存します
onWindowChage：ウィンドウを切り替えた時点で保存します

----------------------
Live Serverとは簡易ローカルサーバーを起動し、
HTMLやCSSファイルの更新をライブプレビューできるようにするプラグインです。
先ほど設定したファイルの自動保存と合わせて使うことで
変更がリアルタイムに反映されるので気持ちいいです！きっと感動すること間違いなし！

STEP1：HTML、CSSの入っているフォルダをVSCodeで開く
練習中の今は「practice」フォルダですね。
フォルダごとVScodeのアイコンにドラッグ&ドロップすると開けます。

次にLive Serverを起動させていくんですが、起動の仕方は3パターンあるのでこのどれかを使ってください！

STEP2-1：下のツールバーにあるGo Liveをクリックする
----------------------
/* リンクの上にマウスが置かれたときに色を少しだけ薄くする */
a:hover { opacity:0.7; }
----------------------
エメットのリスト
ul>li*3
----------------------

dl>dt+dd
----------------------

dl>(dt+dd)*3
----------------------
bg#000をTabで展開すると、background: #000000;
c#fffをTabで展開すると、color: #ffffff;
fz16をTabで展開すると、font-size: 16px;
dibをTabで展開すると、display: inline-block;
mb32をTabで展開すると、margin-bottom: 32px;
p8-12-8-12をTabで展開すると、padding: 8px 12px 8px 12px;
----------------------
リセットcss先
----------------------


----------------------
floatの位置をちゃんととるため？
高さをfloatでも消させないため
float パターン　clear　　float clear

<div class="container clear">
に対して以下のcssをあてる
.clear::after
{
    content: "";疑似要素を実体化
    clear: both;floatを解除
    display: block;ブロック要素とする。
}
----------------------
.header-nav-item
{
    float: left;
	//リストの文字余白左側の間隔を開ける
    margin-left: 50px;
}
----------------------
文字の高さline　heightそろえていく
----------------------
中央に文字を寄せる
    text-align: center;

----------------------
フレックスボックスおすすめ
ウェブクリエーターボックス　
フレックスボックスチートシート
----------------------
<form action="#"method="post">
  <input type="email" name="email" id="email" placeholder="メールアドレス">
  placeholder="最初から文字が入力フォームに半透明で入力されている"
  value="最初から入力"
</form>
<button type="submit" class="btn btn-register" >無料ではじめる</button>
        

メール
<input type="email" name="email" id="email" placeholder="メールアドレス">
            
            
<button type="submit" class="btn btn-register" >無料ではじめる</button>

----------------------
html　input
最初から文字が入力されている
value="最初から表示"
placeholder="薄く表示"
----------------------
------------------------------------------

角を丸めるにはborder-radiusプロパティを用います。
/* border-radiusを4pxに指定してください */
  border-radius:4px;
------------------------------------------
inputはtypeまで指定し、複数cssをあてるコピーしまくる
inputタブを複数cssで設定する
input[type="email"],input[type="text"]
{
    width: 600px;
    border: 3px solid blue;
    font-size: 18px;
    display: block;//意味わからん
    margin: auto;
    padding: 15px;
    border-radius: 999px;//丸く
    margin-bottom: 20px;
}
----------------------
ボタンなどは使いまわすので共通の部分を作っておく
html＞＞＞class="btn btn-register"
.btn
{
    padding: 20px 60px;
    display: inline-block;
    background-color: blueviolet;
    color: white;
    font-size: 24px;
    font-weight: bold;
    border-radius: 999px;

}
.btn:hover
{
    opacity: 0.7;
    cursor: pointer;
}
.btn-register
{
    background-color: tomato;
    display: block;
    margin: auto;
}
----------------------
ファイルがある階層の上指定
../
背景を縮小拡大して全部を表示させる
background-size:cover;
.top
{
   background-image: url(../img/main-vsual-nontitle.png);
   background-size:cover; 
   
}
----------------------
スマホ　レスポンシブル表示


ipadの一番大きいサイズ　768px
ｐｃから一番大きいパッドまで　レスポンシブル
/*スマホ要の表示 */
@media only screen and (max-width:767px)
{
    header
}
----------------------

親要素の幅を子要素の幅が超えたら上下に並べる
flex-wrap: wrap;
----------------------
クラス　を無効にする
.clear::after
    {
        content: none;
    }
----------------------
クラスでなくタグを開く
body
{
    color: rgb(240, 6, 6);
    font-family: Verdana, Geneva, Tahoma, sans-serif;
    line-height: 1.5;

}
----------------------
bootstrap
-----------------
色　公式colorで検索
text-primary　青
.text-primary

.text-secondary 灰

.text-success　緑

.text-danger　赤

.text-warning　黄色

.text-info　水色
text-white 白
-----------------
背景
bg-primary
bg-light 薄い灰色
-----------------

文字サイズなど公式ｔｙｐで検索
----------------------
text-center
----------------------
font-weight-bold
font-weight-normal
font-weight-light
----------------------
文字のサイズ
display-1
display-2
----------------------



幅などsizingで検索
w-25 親の25%
w-auto　
h-50 親の50%
----------------------
pading　margin
spacingで検索
pading
pt-5
pr-5
pb-5
pl-5
p-5 
p-y5
p-x5
margin
m-5
m-y5
----------------------
Gridレイアウト
grid KENNSAKU  
containerのっクラスに入れる
col
一行を12分割
col-6　半分50%
１２を超えると自動的に割り込む
----------------------
画面サイズの制御

col-  auto
col-sm 540
col-md 720
col-lg 960
col-xl 1140px

col-md-4 720px以下の時画面3分の１
----------------------
ボタン　bottomで検索
class="btn"でボタンの型
btn-primary  色の指定
btn-outline　外側だけ色ついて中白
btn-lg　大きめのボタン
----------------------
nav バーを使う
公式navで検索
----------------------

カードを使う
cards検索　card　group
----------------------
2行2列
<div class="row row-cols-2">
    <div class="col">Column</div>
    <div class="col">Column</div>
    <div class="col">Column</div>
    <div class="col">Column</div>
</div>
----------------------
2行3列
<div class="row row-cols-3">
    <div class="col">Column</div>
    <div class="col">Column</div>
    <div class="col">Column</div>
    <div class="col">Column</div>
</div>
----------------------
1行4列
<div class="row row-cols-4">
    <div class="col">Column</div>
    <div class="col">Column</div>
    <div class="col">Column</div>
    <div class="col">Column</div>
</div>
----------------------
row-col-md-3
720px以下だったら3列
----------------------
list 公式listで検索
縦の表みたいになる
----------------------
shit　conrl　ｆ
複数行　自動改行
----------------------
forms 公式検索 31;21
----------------------
タグ名#id名　→　idが付く
----------------------
タグ名{要素}　→　タグの中に要素が入る
----------------------
ポートフォリオやサイトを作るとき、
無料画像を探すなら『O-DAN』がオススメです！
--------------------
日本の無料画像がほしい場合は『タダピク』で検索しましょう！
--------------------
実際に上記の記事通りに作ったポートフォリオサイトがこちらです。

Startkit(スタートキット) | 初めてのホームページ専門店
--------------------
テンプレ
canvas or POLO ＋ 他の3つから1個

「汎用テンプレ＋クリエイティブ系テンプレ」と2つ用意しとくと、作れるLPの幅が広がります。

--------------------
縦長ページの全体スクショとりかた

１．フルスクリーンキャプチャーを撮りたいWebページを表示した状態で、
画面右上にある［Google Chromeの設定］アイコン→［その他のツール］→［デベロッパーツール］の順にクリックします。
２．デベロッパーツールが表示されたら、［toggle device toolbar］アイコンをクリックします（1）。
すると画面の上部にWebページを表示するブラウザーの種類やサイズが表示されるので、必要に応じて変更も可能です（2）。
３．デベロッパーツールの右上にある［More options］アイコン→［Capture full size screenshot］の順にクリックして、
フルサイズのスクリーンショットを撮りますが表示されたら、［toggle device toolbar］をクリックします（1）。
すると画面の上部にWebページを表示するブラウザーの種類やサイズが表示されるので、必要に応じて変更も可能です。
---------------------
CSS設計完全ガイド
---------------------
javascript
----------------------
1
文字出力

console.log("hello")

----------------------
2
変数
let kazu000=25
let moji="mojidesu"

定数　変化させない数字
const kazu=99

数字からの変数名はエラー
let　999kaku これはエラー
--------------------

文字列に変数をうめこむ
let name="taro"
console.log('こんにちは ${name}')
>こんにちは taro
---------------------
3
関数

function(data){
  return date*2

}
---------------
複数の引数
function(name1,name2){

}
function("taro","jiro")
---------------------
4
75>45
>true
100<9
>false
----------------------
if(56>20){

}
かつ
if(score>=20 && score<=80){

}
または
if(score>=20 || score<=80){

}
----------------------
5
swithch(score){
  case 1:
    console.log(score)
    break
  case 1:
    console.log(score)
    break
  case 1:
    console.log(score)
    break
  default :
    console.log("その他")
}
--------------------
6
配列
scores=[20,10,300]
配列に新たな値を入れる
scores.push[90]
scores.push["hello"]
scores.push[true]
>[20,10,300,"hello",true]

何個データが入っているか
scores.length
>5
要素の最後を削除する
scores.pop
>[20,10,300,"hello"]
最初の要素を削除する
scores.shift()
>[10,300,"hello"]
---------------------
6
オブジェクト  キーとバリューがある
scores={
  math:87,
  science:34,
  english:67
}
scores['englishu']
scores.english
>67
値を変える
scores.english＝0;
---------------------
配列とオブジェクトを組み合わせる

allScores=[
  {math:87,science:34,english:67}
  {math:77,science:74,english:77}
]
データを取り出す
allScores.[1].english
>77
----------------------
オブジェクトの中に関数を入れる（ジャバスクリプトでいうメソッド）
scores={
  math:90,
  message:function(){
    console.log("メッセージです")
  }
}
scores.message()
>メッセージです
----------------------
オブジェクト内で　そのオブジェクトの要素をメソッドで使うthis
user={
  firstName:taro,
  lastName:yamada,
  fullName:fuction(){
    return'${this.lastName} ${this.firstName}'
  }
  //さらにオブジェクトの要素ファンクションを別のファンクションで使う
  SAY:fuction(){
    const:NAME=this.fullname()
    return'${NAME}です'
  }
}
----------------------
繰り返し
const scores=[1,2,3,4,5,6]
for(let score of scores){
  console.log(score)
}
毎度のforeach
scores.firEach(function(score){
  console.log(score)
})
いつもの
for(let i=0;i<5;i++){}
----------------------
htmlでjavascriptを使うdom

javascriptでhtmlを取得する方法
１．htmlのidでhtmlを取得＞アラートで表示
<h2 id="service-title">30DAYSトライアル</h2>

alert( document.getElementById('service-title').outerHTML ) 

2.
/* ②HTMLデータを取得しよう（classで取得編） */
/* document.getElementsByClassNameは、
documentの中から指定したclassがついてるHTMLオブジェクトを探して取得してくれます。
idとは違い、配列で返ってくる点に注意しましょう！*/
<p class="lead">1日1題30日でプログラマーになろう！</p>
<p class="lead">JavaScript学習中</p>

alert( document.getElementsByClassName('lead')[0].outerHTML ) 
alert( document.getElementsByClassName('lead')[1].outerHTML )

３．
/* ③HTMLデータを取得しよう（タグで取得編） */
/* document.getElementsByTagNameは、documentの中から指定したタグが
ついてるHTMLオブジェクトを探して取得してくれます。
idとは違い、配列で返ってくる点に注意しましょう！*/
<a href="https://tokyofreelance.jp/" id="register" class="btn btn-register">登録</a>

alert( document.getElementsByTagName('a')[0].outerHTML ) 
----------------------
<h2 id="service-title">30DAYSトライアル</h2>
のテキスト「30DAYSトライアル」を変化させる

document.getElementById('service-title').innerText = 'デイトラ'
----------------------
/* ⑤JavaScriptでHTML要素を追加しよう */
const login_btn = document.createElement('a') //新規にaタグを作成
login_btn.innerText = 'ログイン' //テキストを追加

//setAttribute(属性名, 値) でid="login"を追加
login_btn.setAttribute('id', 'login') 

login_btn.setAttribute('class','btn')　//class="btn"を追加

//href="https://tokyofreelance.jp/"を追加
login_btn.setAttribute('href','https://tokyofreelance.jp/')　

//親要素.appendChild(追加したい要素)でlogin_btnを追加  */
document.getElementById('js-for-web').appendChild(login_btn) 

ログインボタンが追加されれば成功です！ 
javascript公式
https://developer.mozilla.org/ja/docs/Web/API/Element
----------------------
/* ⑥JavaScriptからクリック操作してみよう */
/* document.getElementById("register").click() */
/* リンク先にページ遷移できてれば成功です */
----------------------
/* ⑦イベント処理を追加しよう（onload編） */
/* window.onload() = funciton(){}でDOM（HTMLデータ）が
読み込まれた後に実行したい処理を追加します。1セットで覚えておきましょう！
読み込み後に実行したい処理はfunction() {  }の中に書きます。*/
window.onload = function() {
  document.getElementById('service-title').innerText = 'デイトラ' 
} 
----------------------
/* ⑧イベント処理を追加しよう（click編）
ユーザーによってボタンがクリックされたときの処理を追加します。
イベントの処理にはaddEventListener()メソッドを使います。第一引数に監視したいイベント、第二引数にそのイベントが起きた時の処理を書きます。第二引数は必ずfunction にしておきましょう！それでは実行後に「クリック」ボタンを押してみてください。 */
document.getElementById("button").addEventListener('click', function() {
  document.getElementById('service-title').innerText = 'デイトラ' 
})
clickの他にも監視できるイベントはたくさんあるので、
詳しくはこちらのイベント一覧を見てください
https://developer.mozilla.org/ja/docs/Web/Events
*/
----------------------
jquery をhtmlに組み込む 

html　のheadに入れる
<!-- jQueryのライブラリー本体を読み込む -->
<script src="https://code.jquery.com/jquery-3.4.1.js"></script>
<!-- 必ずjQuery本体を読み込んだ後にjQueryで書いたファイルを読み込む-->
<script src="js/practice.js"></script>
----------------------
$(function() {  
  //この中にプログラムを書いていきます
  
});
----------------------
/* ②jQueryの書き方ルール 
$("主語").動詞("補語");
という文法ルールです。
試しにh2のテキストを「デイトラ」にかえるコードを書いてみましょう↓
*/
$(function() {  
  //h2の 文字を変える デイトラに
  $('h2').text('デイトラ');
});

document.getElementByTagName('h2').innerText = 'デイトラ' 
----------------------
$(function() {  
  //aを 隠す
  $('a').hide();
  //主語と動詞で完結する場合は補語は不要です
});
document.getElementByTagName('a').style.display = 'none' 
----------------------
/* セレクタの指定の仕方3パターンまとめ

■タグ名で指定する
$("h2")

■クラス名で指定する
$(".lead")

■ID名で指定する
$("#js-for-web")
----------------------
.text()	テキストを取得する
.text('変更したいテキスト')	テキストを''内の文字列に変更する
.html()	HTMLを取得する
.html('変更したいHTML')	HTMLを''内のHTMLに変更する
.click() 対象要素をクリックする
.prepend('要素')	要素の先頭にHTMLを挿入する
例：$(#lists).prepend('<li>先頭に追加するリスト</li>')
.append('要素')	要素の最後にHTMLを挿入する
例：$(#lists).append('<li>最後に追加するリスト</li>')
.remove()	要素を削除する
.attr('属性')	指定した属性の値を取得する
例：$(a#special-link).attr('href')
.attr('属性', '値')	指定した属性の値を変更する
例：$(a#special-link).attr('href', 'https://xxxx.com')
.removeAttr(属性名)	指定した属性を削除する
.addClass(class属性値)	class属性を追加する
例：$(#button).addClass('active')
.removeClass(class属性値)	class属性を削除する
例：$(#button).removeClass('active')
.css(プロパティ名)	指定したCSSプロパティの値を取得する
例：$(#logo).css('color')
.css(プロパティ名,値)	指定したCSSプロパティの値を設定する
例：$(#logo).css('color','red')
val（）	フォームの入力値（value属性の値）を取得する
例：$(input#name).val()
val（"入力値"）	フォームの入力値（value属性の値）を設定・上書きする
例：$(input#name).val('tofuri')

アラート
alert()
変数の値をアラートで表示
alert(hensu)

.text()テキストを取得する
.text('変更したいテキスト')テキストを''内の文字列に変更する
.html()HTMLを取得する
.html('変更したいHTML')HTMLを''内のHTMLに変更する
.click() 対象要素をクリックする
.prepend('要素')要素の先頭にHTMLを挿入する
例：$(#lists).prepend('< li >先頭に追加するリスト< /li >')
.append('要素')要素の最後にHTMLを挿入する
例：$(#lists).append('< li >最後に追加するリスト< /li >')
.remove()要素を削除する
.attr('属性')指定した属性の値を取得する
例：$(a#special-link).attr('href')
.attr('属性', '値')指定した属性の値を変更する
例：$(a#special-link).attr('href', 'https://xxxx.com')
.removeAttr(属性名)指定した属性を削除する
.addClass(class属性値)class属性を追加する
例：$(#button).addClass('active')
.removeClass(class属性値)class属性を削除する
例：$(#button).removeClass('active')
.css(プロパティ名)指定したCSSプロパティの値を取得する
例：$(#logo).css('color')
.css(プロパティ名,値)指定したCSSプロパティの値を設定する
例：$(#logo).css('color','red')
val（）フォームの入力値（value属性の値）を取得する
例：$(input#name).val()
val（"入力値"）フォームの入力値（value属性の値）を設定・上書きする
例：$(input#name).val('tofuri')
----------------------
練習問題：inputの値によって登録ボタンとログインボタンを出し分けるプログラム 
①inputタグのvalueを取得

②valueがvisiterなら「ボタン」の文字を"登録"に + btn-loginクラスを削除
③btn-registerクラスを追加
④valueがuserなら「ボタン」の文字を"ログイン"に + btn-resigterクラスを削除
⑤btn-loginクラスを追加


----------------------
$(function() {  
  //この中にプログラムを書いていきます
  status=$("#user-status").val()
  alert(status)
	btn=$("#register")  
  if(status==='visiter'){
  	btn.text('登録')
    btn.removeClass('btn-login')
    btn.addClass('btn-register')
  }
  else if(status==='user'){
  	btn.text('ログイン')
    btn.removeClass('btn-register')
    btn.addClass('btn-login')
    
    $('.login-area').append('<a href="http"class="btn btn-withdraw">退会</a>')
  }

});
----------------------
/* ③さらに詳しく指定する */
/* 指定要素の子要素からセレクタに当てはまる要素を取ってくる
find()メソッド
id="s-for-web"の中のpタグを配列で取得
var texts = $('#js-for-web').find('p');

console.log(texts[0]);
----------------------
/* .children('セレクタ')　対象要素の直属の子要素から、セレクタに該当するものを取ってくる。 */
var texts = $('#js-for-web').children('p');

console.log(texts[0]); 
----------------------
/* ④イベント処理（click編） */
/* ボタンがクリックされたときの処理を書いてみましょう。
↑のHTMLファイルのbuttonタグにかかっているコメントアウトを外してください。
jsではaddEventListener()メソッドを使って書きましたが、
jqueryを使うとはるかにシンプルに書くことができます。試しに、
#buttonをクリックすると#service-titleの文字が変わるプログラムを書いてみましょう！
*/

//js
document.getElementById("button").addEventListener('click', function() {
  document.getElementById('service-title').innerText = 'デイトラ' 
}) 

//jQuery　圧倒的にシンプル！
$('#button').click(function(){
  $('#service-title').text('デイトラ');
});
----------------------
/* ⑤イベント処理（hover編） */
/* 続いて、ホバーされたときに処理を書いてみましょう。
hoverイベントはfunctionをコンマ区切りで2個続けて書くことができ、最初に「ホバーされたときの処理」、2つ目に「ホバーが外れたときの処理」を書きます。
$('#language-wrapper').hover( 
  function() {
  //ここにホバーされたときの処理を書く
  
  },
  function() {
  //ここにホバーが外れたときの処理を書く

  }
);
それでは例として、#service-titleにホバーするとテキストの色がオレンジになるプログラムを書いてみましょう！
*/
$('#service-title').hover( 
  function() {
  //ここにホバーされたときの処理を書く
    $(this).css('color','orange');
  },
  function() {
  //ここにホバーが外れたときの処理を書く
      $(this).css('color','#082B48');
  }
);
----------------------
アニメーションの一覧はこちらから↓
https://api.jquery.com/category/effects/

//⑥スライドのように開閉して表示
$('#service-title').hover(
  function(){
    $('#register').slideUp();
  },
  function(){
    $('#register').slideDown();
  }
); 
//⑦フワッと浮き上がる表示
$('#service-title').hover(
  function(){
    $('#register').fadeIn();
  },
  function(){
    $('#register').fadeOut();
  }
);
----------------------
※なお、「jQuery ドロワーメニュー」などで検索すると、
まずライブラリを使った実装方法がヒットすると思いますが、
今回はjQueryライブラリの利用はナシです！
自分でjQueryコードを書いて自作してください。
----------------------
slideToggle

$("#id").on("click", function() {
  $(this).next().slideToggle();
});
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------





















