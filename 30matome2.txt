詰まっている箇所（〇〇編DAY〇〇）
聞きたいことの一行まとめ
起きている問題（起きている現象の詳細/エラーメッセージ/スクリーンショット）
ソースコード（関連するソースコード/全ソースコード）
問題解決するために試したこと（コードもあれば追記） 
問題について自分なりに考えたこと（デバッグ結果/検索結果/自分なりの原因予想）
----------------------
htmlファイルのデフォルトを表示(emet)
!+tab 
----------------------
<a href="https://www.daily-trial.com/">リンクするよ</a>
<img src="https://tokyofreelance.jp/web_first.png">
----------------------
ブロック要素のタグは、閉じタグ</～>の時点で改行されます。
なので、ブロック要素同士を連続で書くと縦に並ぶことになります。
一方、インライン要素のタグを連続で書くと横に並びます。
段落ではなく文章として認識されているため、改行がされないんです。

また、「タグに横幅や高さの設定をしたのに、反映されない！」
というのは初心者の人が陥りがちな落とし穴ですが、それはインライン要素だからです。
------------------------------------------

ブロック要素　ブロックである
<a>タグをブロック要素にすると、大きさが親要素いっぱいに広がるので、
全体をクリックできるようになります。
display:block;
------------------------------------------
marginにautoを指定するときは、必ずwidthを併せて指定します。
なお、上下のmarginにautoを指定することはできません。
margin:0 auto;
containerクラスのように、
広い範囲を囲うようなブロック要素の中央ぞろえはmarginを、
margin:0 auto;
------------------------------------------
テキストやボタンのようなインライン要素・インラインブロック要素
の場合はtext-alignを使うようにしましょう。
text-align:center;
----------------------------------------------------------
横並びブロック  要素
display:inline-block;
------------------------------------------
インライン要素　a　
width height 上下margin　指定できない
------------------------------------------

透明度を上げる
  opacity:0.8;
------------------------------------------------
  opacityには要素の中身全てを透明にするという性質があります。
opacity: 0.9;
背景色のみを透明にするには、rgbaというものを使う必要があります。
background-color:rgba(34, 49, 52, 0.9);
----------------------------------------------------------
------------------------------------------
文字と文字のスペース
letter-spacing:5px;
----------------------
----------------------------------------------------------
ファビコンを使う
アイコンを表示するにはFont Awesomeというものを使うと便利です。
たくさんのアイコンが用意されており、自分の気に入ったアイコンを簡単に使うことが出来ます。
https://fontawesome.com に詳しい使い方やアイコンの一覧が載っています。

Font Awesomeは、以下の手順で使用することができます。
①Font AwesomeのCSSファイルを読み込む
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
②<span>タグにfaクラスとfa-アイコン名クラスを指定する
<!-- ここに<span>タグを追加しましょう -->
<span class="fa fa-twitter"></span>
            Twitterで登録

/* faクラスのmargin-rightを5pxに指定してください */
.fa{
  margin-right:5px;
}
transitionを使うとアニメーションをつけることができます。
「変化の対象」や、「変化にかかる時間」などを指定できます。
「変化の対象」にはcolorなどのプロパティを指定しますが、
allを指定すると全てのプロパティに適用出来ます。
transitionは多くの場合hoverと組み合わせて使います。
/* transitionを指定してください */
.class{
  transition:all 0.5s;
  この後　、変化後のcss
}
----------------------------------------------------------
座標
line-heightプロパティを使うと、行の高さを指定することができます。
要素の縦方向の中央に文字を配置するのにも使えます。
要素の高さとline-heightプロパティを同じ値にすると、
文字がちょうど中央に配置されるようになります。
line-height:65px;


--------------------

HTMLの要素同士は通常重なって表示されることはありませんが、
position: absolute;を使うと、
要素同士を重ねて表示することが出来ます。
サイト全体の左上部分を基準とし、
そこからの位置をtopとleftを用いて指定します。
また、rightやbottomを併用することも可能です。

position: absolute;の基準位置はサイト全体の左上部分です

相対座標指定
親要素であるlesson-iconにposition: relative;
その子要素にposition: absolute;を指定すると、
親座標を基準とした位置を指定する
---------------
立体的なボタンを作る
ボックスに影を付けるためにはbox-shadowプロパティを用います。
 横4px　縦7px
 box-shadow:4px 7px #1a7940;
-------------------
cursorプロパティを用いることでマウスのカーソルが
要素に乗ったときのカーソルの形を変えることができます。
タグによってcursorが初期状態で設定されているものもあり、
例えば<a>タグは初期状態でpointerが設定されています。
/* カーソルの形をpointerにしてください */
  cursor:pointer;
-------------------
ボタンを押したような処理
セレクタにactiveを用いることで、
要素がクリックされている間だけCSSを適用することができます。
セレクタ:activeというように指定します。
-----------------------------------------

ボタンを押したような見た目処理
前回position: relative;はposition: absolute;
の基準位置を決めるために使っていましたが、
要素の位置を変更するためにも使うことが出来ます。
position: relative;をtopやleftと併用すると、
その要素を本来の位置からずらせます。
.btn{
  box-shadow:none;
  position:relative;//
  top:7px;
}
-----------------------------------------

position: fixed;を使うと、
常に要素を画面上の指定した位置に固定させておくことができます。
位置は、top、left、right、bottomを使って指定します。

positionを使用すると要素の重なりが生じます。
その結果図のように、レッスン紹介部分とヘッダーが重なった時に、
ヘッダーが隠れてしまいます。
重なり順を指定して、ヘッダーが上に表示されるようにしましょう。
position:fixed;
  top:0;
z-indexプロパティは、要素の重なりの順序を指定する際に使用します。
z-indexは整数値で指定し、値が大きいほど上に表示されます。
z-indexプロパティは必ずpositionプロパティと併用する必要があるので、
注意しましょう。
 position:fixed;
/* z-indexを10に指定 数が大きいほど手前表示*/
  z-index:10;

  ーーーーーーーーーーーーーーーーーーーーーーーーーー
  画面サイズによって表示変える
  メディアクエリの書き方を見てみましょう。
メディアクエリは、@media (条件) { .... }という様に書きます。
指定された条件が当てはまるときにのみ{ }内のCSSが適用されます。
/* ブレイクポイントをmax-width: 1000pxに指定してください */
@media (max-width:1000px) {
  /* h1のcolorをblueに指定してください */
  h1{
    color:blue;
  }
  
}
------------------------------
左右のpaddingを追加すると要素の幅の合計が100%を超えてしまい、
レイアウトが崩れてしまっています。

box-sizingをborder-boxに指定すると、
要素の幅(width)の合計にpaddingとborderが含まれるようになります。
そのため、paddingやborderを追加した時に生じるレイアウト崩れ
を未然に防ぐことができます
（※ただし、marginはborder-boxでの合計値に含まれません）。
* {
  box-sizing: border-box;
}
-----------------
全ての要素にcssを当てはめる
* {
  box-sizing: border-box;
}
-----------------
レスポンシブデザインを適用する準備として、
<head>タグ内にviewportを設定しましょう。
viewportを設定しないと、スマートフォンやタブレット
での閲覧時にメディアクエリが正しく機能しません。
<meta name="viewport" content="width=device-width, initial-scale=1.0">
適用cssは必ずviewportよりも下の行に記述する
---------------------
通常、親要素の高さは子要素を包む高さとなります。
しかし、子要素が全てfloatの時、親要素の高さは0となってしまうという性質があります。
これは、floatは「浮いている」という意味で、
親要素から見るとfloatの子要素は存在しないように見えるからです。

子要素が全てfloatでも、親要素が高さを持つように設定してみましょう。
floatはclear: left;で「浮いている」状態を解除できます。
ここではclear: left;を適用するためだけの空のタグを用意しましょう。
空タグとclearでfloatを解除するのはよく使うテクニックなので、
覚えておくようにしましょう。
---------------------
要素を非表示にするにはdisplay: none;を用います。
---------------------
非表示にした要素を表示させる時は、display: block;を用いて表示します。
---------------------
縦並びのものを横並びにするlistなど
横並びにしたい要素の親要素にdisplay: flexを指定します。
---------------------
親要素の幅に合わせて伸ばしたい要素にflex: autoを指定します。
---------------------
4つの横並び用要素を２つずつ画面いっぱいに並べる
.oya{
  display:flex;
  flex-wrap:wrap;
}
.ko{
  flex:auto;
  width:50%;
}
---------------------
縦に並べたい要素の親要素にflex-direction: columnを指定します。
---------------------

----------------------------------------------------------
<head>

<!-- ここでstyle.cssを読み込みます -->
<link rel="stylesheet" href="./css/style.css">
</head>
----------------------
絶対パス…ファイルのある場所を完全に指定する
相対パス…編集しているファイルから見たファイルの場所を指定する
----------------------
h2 { color: red; }
、「<h2></h2>で囲まれた範囲の（セレクタ）、
colorを（プロパティ）、redにする！（バリュー）」
----------------------

指定したクラスだけをcssで見た目変更
<h2 class="yellow-font">黄色のH2</h2>

/* .yellow-fontがついた要素の文字色を黄色に指定。こちらの方が優先されます */
  .yellow-font {
    color: yellow; 
    font-size: 20px;
  }
----------------------
太字にする
font-weight: bold;
----------------------
子要素を指定
<article class="contents">
<p>子孫となるpです。</p>
<p>子孫となるpです。</p>
</article>

.contents p {
font-size: 18px;
}
----------------------
直属の子要素のみ指定
<div class="contents">
<p>このpの色だけ変えたい</p>
<div>
<p>ここは変えない</p>
<p>ここも変えない</p>
</div>
</div>

/* 誤：「.contents p」指定では全てのpタグの色が変わってしまう */
.contents p {
color: red;
}

/* 正：「>」で繋げることで直属の子孫要素のみを指定できます */
.contents > p {
color: red;
}
----------------------
コンテンツエリア…内容が表示される部分
padding…要素の中に割り当てられている余白
border…要素の境界
margin…隣接する要素との余白
<div>～</div>という一つの要素は、実はこの四つの要素を含んだボックスになっているんです。
----------------------
クロームの検証機能でcssを変更する。

画面文字　文字クリック　＞右クリック検証＞右側に検証画面が出る

elements.styleにcss入力


----------------------
font-size: 18px;
font-size: 2em;2倍
font-size: 200%;2倍

----------------------
font-family:serif;//ちょっとシュッとなる

font-family:serif,sans-serif;
serifが環境的になかったら、sans-serifになる
----------------------
width: 250px;幅
height: 80px;高さ
padding: 20px; 内側全部20pxスペースあける

padding: 20px,10px,5px,3px;内側　上　→　↓　←　ピクセルをあける

border:10px solid black　黒の　枠で囲む
border:10px doted 点線で囲む

margin:10px　外側余白10px

box-sizing:border-box;  border以下をすべて合わせて　height　widthにする。
----------------------
inline要素
line-height: 40px;行間を指定

text-align: center;センターに文字を持ってくる
vertical-align: top; 垂直方向　上に合わせる
text-decoration: underline;　アンダーラインを引く
text-decoration: line-through;　アンダーラインを引く
later-spacing:10px

----------------------
background-color: red; 後ろの色指定
//注意　後ろ画像指定 入れるdivをdisplay:block;にしておく
//幅　高さ　指定する
background-image: url(./img/test.png);
    width: 600px;
    height: 600px;
background-size: contain;画像をサイズに収める　縦横比率そのまま
----------------------
background-repeat: no-repeat;画像をリピートしない
background-repeat: repeat-y;画像をｙ方向にリピートする
background-attachment: fixed;　背景画像スクロールさせても動かない
background-attachment: scroll;　背景画像スクロールさせる
----------------------
float: left;横並び


clear: both;横並び解除
----------------------
縦横を自由に指定し並べる（現在floatはあまりつかわれていない）
display: flex;柔軟に横に並べる
flex-wrap:wrap;　はみ出したら次の行に改行


justify-content: center;横方向　これは中央並べ
align-items: flex-end;　縦方向　これは↓に合わせる

flex-direction: column;　縦に並べる
flex-direction: row;　横に並べる（通常のdisplay: flex;）

コンテンツを等間隔に並べる
justify-content: space-between;コンテンツの間だけ
justify-content: space-arround;コンテンツの両端も含めて

flexboxを使うと、

要素の横並び「diplay:inline-block」
高さの中央揃え「vertical-align:middle」
右揃え・左揃え「float」をいっぺんにやってくれる
----------------------
常に表示させておきたいもの
position: fixed;
左から10px開けて表示
left:10px;
------------
---------------------
縦並びのものを横並びにするlistなど
横並びにしたい要素の親要素にdisplay: flexを指定します。
---------------------
親要素の幅に合わせて伸ばしたい要素にflex: autoを指定します。
---------------------
4つの横並び用要素を２つずつ画面いっぱいに並べる
.oya{
  display:flex;
  flex-wrap:wrap;
}
.ko{
  flex:auto;
  width:50%;
}
---------------------
縦に並べたい要素の親要素にflex-direction: columnを指定します。
---------------------
重なったオブジェクトの前に出す方を決める
z-index;100; 数字が大きいほど前に表示される
--------------
本来表示されるべき所からずらす
position:relative;
left:10px;

-------
親要素を基準として相対的にずらす
親要素に
position:relative;
子要素に
position:absolute;
left:10px;


----------------------
vscode autosave
上部メニューから「設定」を選ぶ\
（Macの場合は【Command 】+【,】のショートカットでも開きます！）
ファイル＞ユーザー設定＞設定＞autosave＞after　delay
検索窓に「autosave」を入力
セレクトボックスから「afterDelay」を選ぶ

off：自動保存されません
afterDelay：一定時間操作がなかったら保存します
onFocusChange：タブからカーソルが消えた時点で保存します
onWindowChage：ウィンドウを切り替えた時点で保存します

----------------------
Live Serverとは簡易ローカルサーバーを起動し、
HTMLやCSSファイルの更新をライブプレビューできるようにするプラグインです。
先ほど設定したファイルの自動保存と合わせて使うことで
変更がリアルタイムに反映されるので気持ちいいです！きっと感動すること間違いなし！

STEP1：HTML、CSSの入っているフォルダをVSCodeで開く
練習中の今は「practice」フォルダですね。
フォルダごとVScodeのアイコンにドラッグ&ドロップすると開けます。

次にLive Serverを起動させていくんですが、起動の仕方は3パターンあるのでこのどれかを使ってください！

STEP2-1：下のツールバーにあるGo Liveをクリックする
----------------------
/* リンクの上にマウスが置かれたときに色を少しだけ薄くする */
a:hover { opacity:0.7; }
----------------------
エメットのリスト
ul>li*3
----------------------

dl>dt+dd
----------------------

dl>(dt+dd)*3
----------------------
bg#000をTabで展開すると、background: #000000;
c#fffをTabで展開すると、color: #ffffff;
fz16をTabで展開すると、font-size: 16px;
dibをTabで展開すると、display: inline-block;
mb32をTabで展開すると、margin-bottom: 32px;
p8-12-8-12をTabで展開すると、padding: 8px 12px 8px 12px;
----------------------
リセットcss先
----------------------
/*margin: auto;は中央ぞろえになる？  */
    margin: auto; 
----------------------


----------------------
floatの位置をちゃんととるため
float パターン　clear　　float clear

<div class="container clear">
に対して以下のcssをあてる
.clear::after
{
    content: "";
    clear: both;
    display: block;
}
----------------------
.header-nav-item
{
    float: left;
	//リストの文字余白左側の間隔を開ける
    margin-left: 50px;
}
----------------------
文字の高さline　heightそろえていく
----------------------
中央に文字を寄せる
    text-align: center;

----------------------
フレックスボックスおすすめ
ウェブクリエーターボックス　
フレックスボックスチートシート

----------------------
html　input
最初から文字が入力されている
value="最初から表示"
placeholder="薄く表示"
----------------------
------------------------------------------

角を丸めるにはborder-radiusプロパティを用います。
/* border-radiusを4pxに指定してください */
  border-radius:4px;
------------------------------------------
inputタブを複数cssで設定する
input[type="email"],input[type="text"]
{
    width: 600px;
    border: 3px solid blue;
    font-size: 18px;
    display: block;//意味わからん
    margin: auto;
    padding: 15px;
    border-radius: 999px;//丸く
    margin-bottom: 20px;
}
----------------------
ボタンなどは使いまわすので共通の部分を作っておく
html＞＞＞class="btn btn-register"
.btn
{
    padding: 20px 60px;
    display: inline-block;
    background-color: blueviolet;
    color: white;
    font-size: 24px;
    font-weight: bold;
    border-radius: 999px;

}
.btn:hover
{
    opacity: 0.7;
    cursor: pointer;
}
.btn-register
{
    background-color: tomato;
    display: block;
    margin: auto;
}
----------------------
ファイルがある階層の上指定
../
背景を縮小拡大して全部を表示させる
background-size:cover;
.top
{
   background-image: url(../img/main-vsual-nontitle.png);
   background-size:cover; 
   
}
----------------------
スマホ　レスポンシブル表示


ipadの一番大きいサイズ　768px
ｐｃから一番大きいパッドまで
/*スマホ要の表示 */
@media only screen and (max-width:767px)
{
    header
}
----------------------

親要素の幅を子要素の幅が超えたら上下に並べる
flex-wrap: wrap;
----------------------
クラス　を無効にする
.clear::after
    {
        content: none;
    }
----------------------
クラスでなくタグを開く
body
{
    color: rgb(240, 6, 6);
    font-family: Verdana, Geneva, Tahoma, sans-serif;
    line-height: 1.5;

}
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------
----------------------






















